// Recursion
class Solution {
public:
    int solve(int i, vector<int> &nums, int n){
        if(i >= n) return 0;
        int steal = nums[i] + solve(i+2, nums, n);
        int skip = solve(i+1, nums, n);
        return max(steal , skip);
    }
    int rob(vector<int>& nums) {
        int n = nums.size();
        return solve(0 ,nums, n);
    }
};
//Top Dowm
class Solution {
public:
    int dp[101];
    int solve(int i, vector<int> &nums, int n){
        if(i >= n) return 0;
        if(dp[i]!=-1) return dp[i];
        int steal = nums[i] + solve(i+2, nums, n);
        int skip = solve(i+1, nums, n);
        return dp[i] = max(steal , skip);
    }
    int rob(vector<int>& nums) {
        memset(dp, -1, sizeof(dp));
        int n = nums.size();
        return solve(0 ,nums, n);
    }
};
//Bottom Up
class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if(n==0) return 0;
        vector<int> dp(n+1, 0);
        dp[1] = nums[0];
        for(int i = 2; i<=n; i++){
            int steal = nums[i-1] + dp[i-2];
            int skip = dp[i-1];
            dp[i] = max(steal, skip); 
        }
        return dp[n];

    }
};
