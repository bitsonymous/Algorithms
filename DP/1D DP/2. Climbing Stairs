// Recursion

class Solution {
public:
    int climbStairs(int n) {
        if(n < 0) return 0;
        if(n == 0) return 1;
        return climbStairs(n-1) + climbStairs(n-2);
    }
};

// Memoization

class Solution {
public:
    int solve(int n, vector<int> &dp){
        if(n < 0) return 0;
        if(n == 0) return 1;
        if(dp[n] != -1) return dp[n];
        return dp[n] = solve(n-1, dp) + solve(n-2, dp);
    }

    int climbStairs(int n) {
        vector<int> dp(n+1, -1);
        return solve(n, dp);
    }
};

// Bottom Up

class Solution {
public:
    int solve(int n, vector<int> &dp){
        if(n == 1) return n;
        dp[1] = 1, dp[2] = 2;
        for(int i = 3; i <= n; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }

    int climbStairs(int n) {
        vector<int> dp(n+1, 0);
        return solve(n, dp);
    }
};

// Constant Space

class Solution {
public:
    int solve(int n){
        if(n == 1 || n == 2) return n;
        int a = 1, b = 2, ans;
        for(int i = 3; i <= n; i++){
            ans = a + b;
            a = b;
            b = ans;
        }
        return ans;
    }

    int climbStairs(int n) {
        return solve(n);
    }
};
